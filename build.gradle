
task copySources(type: Copy) {
	delete buildDir
	mkdir buildDir
	from('src')
	into(buildDir)
	include('*.ts')
	include('package.json')
	include('config.ini')
}

task (build, type: Exec, dependsOn: 'copySources') {
	doFirst {
		workingDir buildDir
		def commandLineArgs = ['tsc', '-d', '--sourcemap', 'client-handler.ts', '--target', 'ES5', '--outDir', buildDir, '--out', 'client-handler.js'];
		def os = System.getProperty("os.name").toLowerCase();
		if(os.contains('mac')){
			commandLineArgs[0] = "/usr/local/bin/tsc";
		}else if(os.contains('windows')){
			commandLineArgs[0] = System.getenv()['APPDATA'] + '\\npm\\node_modules\\typescript\\bin\\tsc'
			commandLineArgs.add(0, 'node');
		}	
		commandLine commandLineArgs
	}
}

task(npmInstall, type: Exec) {
	doFirst {
		workingDir buildDir
		ignoreExitValue true
		def commandLineArgs = ['npm', 'install', '--silent'];
		def os = System.getProperty("os.name").toLowerCase();
		if(os.contains('mac')){
			commandLineArgs[0] = "/usr/local/bin/npm";
		}else if(os.contains('windows')){
			commandLineArgs[0] = 'npm'
			commandLineArgs.add(0, '/c');
			commandLineArgs.add(0, 'cmd');
		}
		commandLine commandLineArgs
	}
}

task(dist, dependsOn: ['build', 'npmInstall']) << {
	def filelist = files { file(buildDir).listFiles() }
	filelist.filter { File file ->
		file.name.endsWith('js') || file.name.endsWith('d.ts') 
	}.each {File file ->
		def text = file.text;
		def header =	'//  BUILD INFO:\n';
			header+=	"//  Version:     ${version}\n";
			header+=	"//  Revision:    ${project.ext.revision}\n";
			header+=    "//  Builder:     ${project.ext.builder}\n";
			header+=    "//  Date:        ${project.ext.datetime}\n";
			header+=	"\n";
		file.write(header+text);
	}
}

